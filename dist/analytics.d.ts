import { DatabaseManager } from './database.js';
export declare class AnalyticsManager {
    private db;
    constructor(db: DatabaseManager);
    getComplexNetworkAnalysis(): Promise<any>;
    private calculateDirectorNetworkMetrics;
    private calculateShareholderNetworkMetrics;
    private getGovernanceRiskFactors;
    getSectorCorrelationAnalysis(days?: number): Promise<any>;
    private calculateMarketConcentration;
    analyzeNaturalQuery(query: string, context?: string): Promise<any>;
    compareCompanies(companies: string[], metrics?: string[]): Promise<any>;
    analyzeTrends(analysisType: string, target: string, period?: number, includeForecast?: boolean): Promise<any>;
    assessInvestmentRisk(target: string, riskTypes?: string[]): Promise<any>;
    generateAnalystReport(subject: string, reportType: string, includeCharts?: boolean): Promise<any>;
    screenOpportunities(criteria: any, limit?: number): Promise<any>;
    private generateTrendSummary;
    private generateActionSuggestions;
    private analyzeCompanyPerformances;
    private calculatePerformance;
    private calculateVolatility;
    private assessCompanyRisk;
    private generateComparisonSummary;
    private generateComparisonRecommendations;
    private analyzePriceTrend;
    private generateTrendInsights;
    private generateSimpleForecast;
    private calculateSectorVolatility;
    private determineMarketDirection;
    private calculateMarketVolatility;
    private generateCorrelationInsights;
    private assessMarketRisk;
    private assessGovernanceRisk;
    private assessSectorRisk;
    private assessLiquidityRisk;
    private assessConcentrationRisk;
    private calculateOverallRiskScore;
    private generateRiskRecommendations;
    private getCompanyGovernanceAnalysis;
    private getCompanyMarketPosition;
    private generateCompanyExecutiveSummary;
    private analyzeSectorCompetition;
    private generateReportConclusions;
    private generateReportRecommendations;
    private scoreOpportunities;
    private getTopSector;
    private calculateGovernanceScore;
    private calculatePercentile;
    private calculateConcentrationRatio;
}
